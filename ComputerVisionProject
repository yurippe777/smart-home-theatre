from imageai.Detection import VideoObjectDetection 
from imageai.Detection import ObjectDetection
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
import os
import cv2 as cv
from PIL import Image
import image_slicer
import PIL
import time
#%matplotlib inline
left = 0
right = 0
bottom = 0
top = 0
frame2 = 5
import PIL
#%matplotlib inline

camera = cv.VideoCapture(0)
#ret, frame = camera.read()



def forFrame(frame_number, output_array, output_count):
    ret, frame = camera.read()
    if output_array:# Only does these actions of TV or Phone is detected. Occur every frame.
        for d in output_array:
             x1 = d['box_points'][0]
             y1 = d['box_points'][1]
             x2 = d['box_points'][2]
             y2 = d['box_points'][3]
             cv.imwrite('box.png', frame)
              
             global left
             global right
             global bottom
             global top
            
             left = x1
             right = x2
             bottom = y1
             top = y2
             im = Image.open('box.png')
             im1 = im.crop((left, bottom, right, top))
             im1.save('img/img_0.png')
             image_slicer.slice('img/img_0.png', 144)
################################################################################################################################
#end of getting box, cropping to box, and splicing image.
# begin of analyzing for 60 different signals
################################################################################################################################
        dim = (549, 549)
        x = [0]*100
        x1 = []
        y = 0
        y1 = 1
        z = 40 # number of leds going to be used
        signal = [0]*z
        while y != z/4: #top leds
            if 9 > y1:
                img = cv.imread("img/img_0_02_0"+ str(y1+1)+".png")
            else: 
                img = cv.imread("img/img_0_02_"+ str(y1+1)+".png")
            img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
            x[y] = img
            img = cv.resize(img, dim, interpolation = cv.INTER_AREA)
            img_temp = img.copy()
            varx, vary = np.varx(img_temp.reshape(-1, 3), axis=0, return_vary=True)
            img_temp[:,:,0], img_temp[:,:,1], img_temp[:,:,2] = varx[np.argmax(vary)]
            signal[y] = img_temp[0][0]
            #print(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            y = y +1
            y1 = y1 + 1
        y = 0
        y1 = 1
        while y != z/4: #right leds
            if 9 > y1:
                img = cv.imread("img/img_0_0"+ str(y1+1)+"_11.png")
            else: 
                img = cv.imread("img/img_0_"+ str(y1+1)+"_11.png")
            img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
            x[y] = img
            img = cv.resize(img, dim, interpolation = cv.INTER_AREA)
            img_temp = img.copy()
            varx, vary = np.varx(img_temp.reshape(-1, 3), axis=0, return_vary=True)
            img_temp[:,:,0], img_temp[:,:,1], img_temp[:,:,2] = varx[np.argmax(vary)]
            signal[y+10] = img_temp[0][0]
            #print(signal[y+10])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            y = y +1
            y1 = y1 + 1
        y= 0
        y1 = 1
        while y != z/4: #bottom
            if 9 > y1:
                img = cv.imread("img/img_0_11_0"+ str(y1+1)+".png")
            else: 
                img = cv.imread("img/img_0_11_"+ str(y1+1)+".png")
            img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
            x[y] = img
            img = cv.resize(img, dim, interpolation = cv.INTER_AREA)
            img_temp = img.copy()
            varx, vary = np.varx(img_temp.reshape(-1, 3), axis=0, return_vary=True)
            img_temp[:,:,0], img_temp[:,:,1], img_temp[:,:,2] = varx[np.argmax(vary)]
            signal[y+20] = img_temp[0][0]
           # print(signal[y+20])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            y = y +1
            y1 = y1 + 1
        y = 0 
        y1 = 1
        while y != z/4: #left leds
            if 9 > y1:
                img = cv.imread("img/img_0_0"+ str(y1+1)+"_02.png")
            else: 
                img = cv.imread("img/img_0_"+ str(y1+1)+"_02.png")
            img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
            x[y] = img
            img = cv.resize(img, dim, interpolation = cv.INTER_AREA)
            img_temp = img.copy()
            varx, vary = np.varx(img_temp.reshape(-1, 3), axis=0, return_vary=True)
            img_temp[:,:,0], img_temp[:,:,1], img_temp[:,:,2] = varx[np.argmax(vary)]
            signal[y+30] = img_temp[0][0]
            #print(signal[y+30])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            x1.append(signal[y])
            np.savetxt('output.txt', x1, fmt='%d', newline='\n', delimiter=',')
           # for y in x1:
            #    print(y, end = ' ')
            y = y +1
            y1 = y1 + 1


    print("FOR FRAME " , frame_number)
    print("Output array for object detected : ", output_array)
    print("The amount of objects detected : ", output_count)
    print("----------END OF FRAME ------------")
    
       # snapshot = np.zeros(frame.shape, dtype=np.uint8)
       # colorArray[:] = snapshot[y, x, :]
      #  rgb = snapshot[y, x, [2,1,0]]
      #  print("Color Array here: " , colorArray)

         

    
    
execution_path = os.getcwd()

#camera = cv.VideoCapture(0)

bounder = VideoObjectDetection()
bounder.setModelTypeAsRetinaNet()
bounder.setModelPath(os.path.join(execution_path , "resnet50_coco_best_v2.1.0.h5"))
custom_objects = bounder.CustomObjects(laptop=True, cell_phone=True,person=False)
bounder.loadModel(detection_speed="fastest")

custom_objects = bounder.CustomObjects(cell_phone=True, tv=True)

video_path = bounder.detectCustomObjectsFromVideo(
                custom_objects=custom_objects,
                output_file_path=os.path.join(execution_path, "traffic_custom_detected"),# delete me
                
                camera_input=camera,save_detected_video=False,
                per_frame_function=forFrame,
                frames_per_second=1, log_progress=True, minimum_percentage_probability=40,detection_timeout=4)

abc = 1
camera = cv.VideoCapture(0)
time.sleep(.01)
while abc == 1:
            ret, frame = camera.read()
            cv.imwrite('box.png', frame)
            im = Image.open('box.png')
            im1 = im.crop((left, bottom, right, top))
            im1.save('img/img_0.png')
            image_slicer.slice('img/img_0.png', 144)
            dim = (549, 549)
            x = [0]*100
            x1 = []
            y = 0
            y1 = 1
            z = 40 # number of leds going to be used
            signal = [0]*z
            while y != z/4: #top leds
                if 9 > y1:
                    img = cv.imread("img/img_0_02_0"+ str(y1+1)+".png")
                else: 
                    img = cv.imread("img/img_0_02_"+ str(y1+1)+".png")
                img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
                x[y] = img
                img = cv.resize(img, dim, interpolation = cv.INTER_AREA)
                img_temp = img.copy()
                varx, vary = np.varx(img_temp.reshape(-1, 3), axis=0, return_vary=True)
                img_temp[:,:,0], img_temp[:,:,1], img_temp[:,:,2] = varx[np.argmax(vary)]
                signal[y] = img_temp[0][0]
                #print(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                y = y +1
                y1 = y1 + 1
            y = 0
            y1 = 1
            while y != z/4: #right leds
                if 9 > y1:
                    img = cv.imread("img/img_0_0"+ str(y1+1)+"_11.png")
                else: 
                    img = cv.imread("img/img_0_"+ str(y1+1)+"_11.png")
                img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
                x[y] = img
                img = cv.resize(img, dim, interpolation = cv.INTER_AREA)
                img_temp = img.copy()
                varx, vary = np.varx(img_temp.reshape(-1, 3), axis=0, return_vary=True)
                img_temp[:,:,0], img_temp[:,:,1], img_temp[:,:,2] = varx[np.argmax(vary)]
                signal[y+10] = img_temp[0][0]
                #print(signal[y+10])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                y = y +1
                y1 = y1 + 1
            y= 0
            y1 = 1
            while y != z/4: #bottom
                if 9 > y1:
                    img = cv.imread("img/img_0_11_0"+ str(y1+1)+".png")
                else: 
                    img = cv.imread("img/img_0_11_"+ str(y1+1)+".png")
                img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
                x[y] = img
                img = cv.resize(img, dim, interpolation = cv.INTER_AREA)
                img_temp = img.copy()
                varx, vary = np.varx(img_temp.reshape(-1, 3), axis=0, return_vary=True)
                img_temp[:,:,0], img_temp[:,:,1], img_temp[:,:,2] = varx[np.argmax(vary)]
                signal[y+20] = img_temp[0][0]
               # print(signal[y+20])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                y = y +1
                y1 = y1 + 1
            y = 0 
            y1 = 1
            while y != z/4: #left leds
                if 9 > y1:
                    img = cv.imread("img/img_0_0"+ str(y1+1)+"_02.png")
                else: 
                    img = cv.imread("img/img_0_"+ str(y1+1)+"_02.png")
                img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
                x[y] = img
                img = cv.resize(img, dim, interpolation = cv.INTER_AREA)
                img_temp = img.copy()
                varx, vary = np.varx(img_temp.reshape(-1, 3), axis=0, return_vary=True)
                img_temp[:,:,0], img_temp[:,:,1], img_temp[:,:,2] = varx[np.argmax(vary)]
                signal[y+30] = img_temp[0][0]
                #print(signal[y+30])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                x1.append(signal[y])
                np.savetxt('output.txt', x1, fmt='%d', newline='\n', delimiter=',')

                y = y +1
                y1 = y1 + 1

               
            global frame2
            frame2 = frame2 + 1
            print("FOR FRAME " , frame2)
